{
  "add-new-procedure": {
    "prefix": "",
    "scope": "sql",
    "body": [
      "IF EXISTS (SELECT * FROM sys.objects WHERE [object_id] = OBJECT_ID(N'[dbo].[${1:ProcedureName}]') AND [type] IN (N'P', N'PC'))",
      "BEGIN",
      "    DROP PROCEDURE [dbo].[${1:ProcedureName}]",
      "END",
      "GO",
      "-- =============================================",
      "-- Author:      ${2:Author}",
      "-- Create date: ${3:Date}",
      "-- Description: ${4:Description}",
      "-- =============================================",
      "CREATE PROCEDURE [dbo].[${1:ProcedureName}]",
      "(",
      "    @${5:ParameterName} ${6:UNIQUEIDENTIFIER}",
      ")",
      "AS",
      "BEGIN",
      "    -- SET NOCOUNT ON added to prevent extra result sets from",
      "    -- interfering with SELECT statements.",
      "    SET NOCOUNT ON;",
      "",
      "    -- Abort procedure on first error",
      "    SET XACT_ABORT ON;",
      "",
      "    -- TODO: Add implementation here",
      "END",
      "GO",
      "",
      "EXEC dbo.eWaySP_SetProcedureDescription N'${1:ProcedureName}', N'${4:Description}.'",
      "EXEC dbo.eWaySP_SetProcedureParameterDescription N'${1:ProcedureName}', N'@${5:ParameterName}', N'${7:ParameterDescription}.'",
      ""
    ],
    "description": "Script to add new procedure on the server."
  },
  "add-new-scalar-valued-function": {
    "prefix": "",
    "scope": "sql",
    "body": [
      "IF EXISTS (SELECT * FROM sys.objects WHERE [object_id] = OBJECT_ID(N'[dbo].[${1:FunctionName}]') AND [type] IN (N'FN', N'IF', N'TF', N'FS', N'FT'))",
      "BEGIN",
      "    DROP FUNCTION [dbo].[${1:FunctionName}]",
      "END",
      "GO",
      "-- =============================================",
      "-- Author:      ${2:Author}",
      "-- Create date: ${3:Date}",
      "-- Description: ${4:Description}",
      "-- =============================================",
      "CREATE FUNCTION [dbo].[${1:FunctionName}]",
      "(",
      "    @${5:ParameterName} ${6:UNIQUEIDENTIFIER}",
      ")",
      "RETURNS ${9:UNIQUEIDENTIFIER}",
      "AS",
      "BEGIN",
      "    DECLARE @${8:ResultVariableName} ${9:UNIQUEIDENTIFIER}",
      "",
      "    -- TODO: Add logic here",
      "",
      "    RETURN @${8:ResultVariableName}",
      "END",
      "GO",
      "",
      "EXEC dbo.eWaySP_SetFunctionDescription N'${1:FunctionName}', N'${4:Description}.'",
      "EXEC dbo.eWaySP_SetFunctionParameterDescription N'${1:FunctionName}', N'@${5:ParameterName}', N'${7:ParameterDescription}.'",
      ""
    ],
    "description": "Script to add new Scalar-valued function on the server."
  },
  "add-new-server-column": {
    "prefix": "",
    "scope": "sql",
    "body": [
      "IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'${1:ColumnName}' AND [object_id] = OBJECT_ID(N'${2:TableName}'))",
      "BEGIN",
      "    PRINT('Column \"${1:ColumnName}\" already exists in table \"${2:TableName}\"')",
      "    RETURN",
      "END",
      "",
      "ALTER TABLE ${2:TableName}",
      "ADD ${1:ColumnName} ${3:UNIQUEIDENTIFIER} NULL",
      "",
      "EXEC eWaySP_SetTableColumnDescription N'${2:TableName}', N'${1:ColumnName}', N'${4:Column description}.'",
      "",
      "PRINT('Column \"${1:ColumnName}\" added to table \"${2:TableName}\"')",
      ""
    ],
    "description": "Script to add new column on the server."
  },
  "add-new-view": {
    "prefix": "",
    "scope": "sql",
    "body": [
      "IF EXISTS (SELECT * FROM sys.views WHERE [object_id] = OBJECT_ID(N'[dbo].[${1:vw_ViewName}]'))",
      "BEGIN",
      "    DROP VIEW [dbo].[${1:vw_ViewName}]",
      "END",
      "GO",
      "-- =============================================",
      "-- Author:      ${2:Author}",
      "-- Create date: ${3:Date}",
      "-- Description: ${4:Description}",
      "-- =============================================",
      "CREATE VIEW [dbo].[${1:vw_ViewName}]",
      "AS",
      "-- TODO: Add SELECT here",
      "GO",
      ""
    ],
    "description": "Script to add new view on the server."
  },
  "create-relations-in-batch": {
    "prefix": "",
    "scope": "sql",
    "body": [
      "",
      "-- Create temp table",
      "IF OBJECT_ID('tempdb..#CreateRelationsInBatch') IS NOT NULL",
      "BEGIN",
      "    DROP TABLE #CreateRelationsInBatch",
      "END",
      "",
      "CREATE TABLE #CreateRelationsInBatch (",
      "    ParentDataGUID UNIQUEIDENTIFIER",
      "  , ChildDataGUID UNIQUEIDENTIFIER",
      ")",
      "",
      "-- Create relations ${1:ParentFolderName}-${3:GENERAL}-${2:ChildFolderName}, direction = ${4:0}",
      "INSERT INTO #CreateRelationsInBatch",
      "SELECT ${1:ParentFolderName}Source.ID, ${2:ChildFolderName}Source.ID",
      "FROM",
      "    table1 ${1:ParentFolderName}Source",
      "    JOIN table2 ${2:ChildFolderName}Source ON ${1:ParentFolderName}Source = ${2:ChildFolderName}Source",
      "",
      "EXEC eWaySP_CreateRelationsInBatch N'${1:ParentFolderName}', N'${2:ChildFolderName}', N'${3:GENERAL}', ${4:0}",
      ""
    ],
    "description": "Create relations in batch."
  },
  "cursor-(static)": {
    "prefix": "",
    "scope": "sql",
    "body": [
      "DECLARE @${1:Variable} AS ${2:UNIQUEIDENTIFIER}",
      "DECLARE ${3:CursorName} CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY FOR",
      "    -- TODO: Add SELECT statement",
      "OPEN ${3:CursorName}",
      "",
      "FETCH NEXT FROM ${3:CursorName} INTO @${1:Variable}",
      "WHILE @@FETCH_STATUS = 0",
      "BEGIN",
      "    -- TODO: Add cursor logic",
      "",
      "    FETCH NEXT FROM ${3:CursorName} INTO @${1:Variable}",
      "END",
      "CLOSE ${3:CursorName}",
      "DEALLOCATE ${3:CursorName}",
      ""
    ],
    "description": "STATIC Cursor. Use when updating data that are source for the cursor. The cursor will copy source data into temp table ignoring any changes that are made afterwards."
  },
  "cursor": {
    "prefix": "",
    "scope": "sql",
    "body": [
      "DECLARE @${1:Variable} AS ${2:UNIQUEIDENTIFIER}",
      "DECLARE ${3:CursorName} CURSOR LOCAL FORWARD_ONLY FAST_FORWARD READ_ONLY FOR",
      "    -- TODO: Add SELECT statement",
      "OPEN ${3:CursorName}",
      "",
      "FETCH NEXT FROM ${3:CursorName} INTO @${1:Variable}",
      "WHILE @@FETCH_STATUS = 0",
      "BEGIN",
      "    -- TODO: Add cursor logic",
      "",
      "    FETCH NEXT FROM ${3:CursorName} INTO @${1:Variable}",
      "END",
      "CLOSE ${3:CursorName}",
      "DEALLOCATE ${3:CursorName}",
      ""
    ],
    "description": "Sample cursor script."
  },
  "delete-multiple-items": {
    "prefix": "",
    "scope": "sql",
    "body": [
      "DECLARE @DeletedItems TABLE",
      "(",
      "    ItemGUID UNIQUEIDENTIFIER,",
      "    ItemVersion INT,",
      "    FileAs NVARCHAR(1280)",
      ")",
      "",
      "DELETE",
      "FROM ${1:TableName}",
      "OUTPUT deleted.ItemGUID, deleted.ItemVersion, deleted.FileAs INTO @DeletedItems",
      "WHERE",
      "    1 = 0 -- TODO: Add filter",
      "",
      "INSERT INTO EWD_ItemChanges (ItemGUID, ObjectTypeID, ItemVersion, FileAs, Removed)",
      "SELECT ItemGUID, dbo.GetObjectTypeID('${2:FolderName}'), ItemVersion, FileAs, 1",
      "FROM @DeletedItems",
      ""
    ],
    "description": "Delete multiple items."
  },
  "surround-with-transaction": {
    "prefix": "",
    "scope": "sql",
    "body": [
      "BEGIN TRY",
      "    BEGIN TRANSACTION",
      "",
      "        $selected$",
      "",
      "    COMMIT TRANSACTION",
      "END TRY",
      "BEGIN CATCH",
      "    ROLLBACK TRANSACTION",
      "    DECLARE @Message NVARCHAR(MAX)",
      "    SET @Message = ERROR_MESSAGE();",
      "    RAISERROR(@Message, 16, 1)",
      "END CATCH",
      ""
    ],
    "description": "Surround SQL query with transaction."
  },
  "update-multiple-items-(local)": {
    "prefix": "",
    "scope": "sql",
    "body": [
      "DECLARE @UpdatedItems TABLE",
      "(",
      "    ItemGUID UNIQUEIDENTIFIER,",
      "    ItemCreated DATETIMEOFFSET(2)",
      ")",
      "",
      "UPDATE ${1:FolderName}",
      "SET ItemVersion = ItemVersion + 1,",
      "    ItemChanged = SYSDATETIMEOFFSET(),",
      "    -- TODO: Add changes here",
      "OUTPUT inserted.ItemID, inserted.ItemChanged INTO @UpdatedItems",
      "WHERE",
      "    1 = 0 -- TODO: Add filter",
      "",
      "INSERT INTO ItemChanges (ItemGUID, ObjectTypeID, Removed, ItemCreated)",
      "SELECT ItemGUID, dbo.GetObjectTypeID('${1:FolderName}'), 0, ItemCreated",
      "FROM @UpdatedItems",
      ""
    ],
    "description": "Update multiple items in eWay-CRM Desktop client database."
  },
  "update-multiple-items": {
    "prefix": "",
    "scope": "sql",
    "body": [
      "DECLARE @UpdatedItems TABLE",
      "(",
      "    ItemGUID UNIQUEIDENTIFIER,",
      "    ItemVersion INT,",
      "    FileAs NVARCHAR(1280),",
      "    ItemCreated DATETIMEOFFSET(2)",
      ")",
      "",
      "UPDATE ${1:TableName}",
      "SET ItemVersion = ItemVersion + 1,",
      "    Server_ItemChanged = SYSDATETIMEOFFSET(),",
      "    -- TODO: Add changes here",
      "OUTPUT inserted.ItemGUID, inserted.ItemVersion, inserted.FileAs, inserted.Server_ItemChanged INTO @UpdatedItems",
      "WHERE",
      "    1 = 0 -- TODO: Add filter",
      "",
      "INSERT INTO EWD_ItemChanges (ItemGUID, ObjectTypeID, ItemVersion, FileAs, Removed, ItemCreated)",
      "SELECT ItemGUID, dbo.GetObjectTypeID('${2:FolderName}'), ItemVersion, FileAs, 0, ItemCreated",
      "FROM @UpdatedItems",
      ""
    ],
    "description": "Update multiple items."
  },
  "update-single-item": {
    "prefix": "",
    "scope": "sql",
    "body": [
      "DECLARE @ItemGUID UNIQUEIDENTIFIER",
      "    SET @ItemGUID = (SELECT ItemGUID FROM ${1:TableName} WHERE 1 = 0) -- TODO: Specify item",
      "UPDATE ${1:TableName}",
      "SET ItemVersion = ItemVersion + 1,",
      "    Server_ItemChanged = SYSDATETIMEOFFSET(),",
      "    -- TODO: Add changes here",
      "WHERE ItemGUID = @ItemGUID",
      "",
      "IF @@ROWCOUNT = 1",
      "BEGIN",
      "    EXEC eWaySP_InsertIntoItemChanges @ItemGUID = @ItemGUID, @FolderName = '${2:FolderName}', @Removed = 0",
      "END",
      ""
    ],
    "description": "Update single item."
  }
}